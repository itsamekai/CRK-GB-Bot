{"version":3,"sources":["../src/xrandr.js"],"names":["CONNECTED_REGEX","POSITION_REGEX","DISCONNECTED_REGEX","MODE_REGEX","MODE_CURRENT_FRAME_RATE_REGEX","ROTATION_LEFT","ROTATION_RIGHT","ROTATION_INVERTED","VERBOSE_MODE_REGEX","VERBOSE_MODE_REGEX_CUSTOM","VERBOSE_HOR_MODE_REGEX","VERBOSE_VERT_MODE_REGEX","VERBOSE_ANY_LINE_REGEX","VERBOSE_EDID_START_LINE","VERBOSE_EDID_NEXT_LINE","VERBOSE_ROTATION_LEFT","VERBOSE_ROTATION_RIGHT","VERBOSE_ROTATION_INVERTED","VERBOSE_BRIGHTNESS","xrandrParser","input","options","strInput","parseOptions","verbosedInput","debug","Buffer","isBuffer","toString","lines","split","result","mode","lastInterface","startParseEdid","forEach","line","parts","test","console","log","exec","connected","modes","rotation","width","parseInt","height","position","x","y","frameRates","filter","e","checkAsteriskPresence","includes","frameRate","slice","rate","parseFloat","interlaced","current","push","brightness","edid"],"mappings":"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","sourcesContent":["const CONNECTED_REGEX = /^(\\S+) connected (?:(\\d+)x(\\d+))?/;\nconst POSITION_REGEX = /\\s+(\\d+)x([0-9i]+)\\+(\\d+)\\+(\\d+)\\s+/;\nconst DISCONNECTED_REGEX = /^(\\S+) disconnected/;\nconst MODE_REGEX = /^\\s+(\\d+)x([0-9i_.]+)\\s+((?:\\d+\\.)?\\d+)([*+ ]?)([+* ]?)/;\nconst MODE_CURRENT_FRAME_RATE_REGEX = /^([^*]+)/;\nconst ROTATION_LEFT = /^([^(]+) left \\((?:(\\d+)x(\\d+))?/;\nconst ROTATION_RIGHT = /^([^(]+) right \\((?:(\\d+)x(\\d+))?/;\nconst ROTATION_INVERTED = /^([^(]+) inverted \\((?:(\\d+)x(\\d+))?/;\n\n// eslint-disable-next-line max-len\nconst VERBOSE_MODE_REGEX = /^\\s*(\\d+)x([0-9i]+)(?:_.+)?\\s+(?:\\(0x[0-9a-f]+\\)\\.)?\\s*([0-9.]+MHz)?\\s*((\\+|-)HSync)?\\s*((\\+|-)VSync)?\\s*(\\*current)?\\s*(\\+preferred)?/;\n// eslint-disable-next-line max-len\nconst VERBOSE_MODE_REGEX_CUSTOM = /^\\s*([^\\s]+)\\s+(?:\\(0x[0-9a-f]+\\)\\.)?\\s*([0-9.]+MHz)?\\s*((\\+|-)HSync)?\\s*((\\+|-)VSync)?\\s*(\\*current)?\\s*(\\+preferred)?/;\nconst VERBOSE_HOR_MODE_REGEX = /^\\s*h:\\s+width\\s+([0-9]+).+/;\nconst VERBOSE_VERT_MODE_REGEX = /^\\s*v:\\s+height\\s+([0-9]+).+clock\\s+([0-9.]+)Hz/;\nconst VERBOSE_ANY_LINE_REGEX = /^\\s+[^\\n]*/;\nconst VERBOSE_EDID_START_LINE = /^\\s+EDID:/;\nconst VERBOSE_EDID_NEXT_LINE = /^\\s+([0-f]{32})/;\nconst VERBOSE_ROTATION_LEFT = /^[^(]+\\([^(]+\\) left \\(/;\nconst VERBOSE_ROTATION_RIGHT = /^[^(]+\\([^(]+\\) right \\(/;\nconst VERBOSE_ROTATION_INVERTED = /^[^(]+\\([^(]+\\) inverted \\(/;\nconst VERBOSE_BRIGHTNESS = /^\\s+Brightness: ([0-9.]+)/;\n\n\nfunction xrandrParser(input, options = {}) {\n  let strInput = input;\n  const parseOptions = {verbosedInput: false, debug: false, ...options};\n  if (Buffer.isBuffer(input)) {\n    strInput = input.toString();\n  }\n  const lines = strInput.split('\\n');\n  const result = {};\n  let mode = {};\n  let lastInterface;\n  let startParseEdid;\n\n  lines.forEach((line) => {\n    let parts;\n    if (CONNECTED_REGEX.test(line)) {\n      if (parseOptions.debug) {\n        console.log('CONNECTED_REGEX', line);\n      }\n      parts = CONNECTED_REGEX.exec(line);\n      result[parts[1]] = {\n        connected: true,\n        modes: [],\n        rotation: 'normal'\n      };\n      if (parts[2] && parts[3]) {\n        result[parts[1]].width = parseInt(parts[2], 10);\n        result[parts[1]].height = parseInt(parts[3], 10);\n      }\n      if (!parseOptions.verbosedInput) {\n        if (ROTATION_LEFT.test(line)) {\n          result[parts[1]].rotation = 'left';\n        } else if (ROTATION_RIGHT.test(line)) {\n          result[parts[1]].rotation = 'right';\n        } else if (ROTATION_INVERTED.test(line)) {\n          result[parts[1]].rotation = 'inverted';\n        }\n      } else {\n        if (VERBOSE_ROTATION_LEFT.test(line)) {\n          result[parts[1]].rotation = 'left';\n        } else if (VERBOSE_ROTATION_RIGHT.test(line)) {\n          result[parts[1]].rotation = 'right';\n        } else if (VERBOSE_ROTATION_INVERTED.test(line)) {\n          result[parts[1]].rotation = 'inverted';\n        }\n      }\n\n      const position = POSITION_REGEX.exec(line);\n      if (position) {\n        result[parts[1]].position = {\n          x: parseInt(position[3], 10),\n          y: parseInt(position[4], 10)\n        };\n      }\n\n      lastInterface = parts[1];\n    } else if (DISCONNECTED_REGEX.test(line)) {\n      if (parseOptions.debug) {\n        console.log('DISCONNECTED_REGEX', line);\n      }\n      parts = DISCONNECTED_REGEX.exec(line);\n      result[parts[1]] = {\n        connected: false,\n        modes: []\n      };\n      lastInterface = parts[1];\n    } else if (!parseOptions.verbosedInput && lastInterface && MODE_REGEX.test(line)) {\n      if (parseOptions.debug) {\n        console.log('MODE_REGEX', line);\n      }\n      parts = MODE_REGEX.exec(line);\n\n      let frameRates;\n      // Regex pattern to match string until asterisk\n      frameRates = MODE_CURRENT_FRAME_RATE_REGEX.exec(line);\n      // Consider the element in the 0th position and splitting it based\n      // on the empty space and then removing the empty space using filter method\n      frameRates = frameRates[1].split(' ').filter((e) => e);\n      // Check if the asterisk exists in the line(string)\n      let checkAsteriskPresence = line.includes('*');\n\n      // If asterisk exists taking the last frame rate from the array\n      // If asterisk does not exist, considering the default first frame rate from the array\n      const frameRate = checkAsteriskPresence ? frameRates.slice(-1)[0] : frameRates[1];\n\n      mode = {\n        width: parseInt(parts[1], 10),\n        height: parseInt(parts[2], 10),\n        rate: parseFloat(frameRate)\n      };\n      if (/^[0-9]+i$/.test(parts[2])) mode.interlaced = true;\n      if (parts[4] === '+' || parts[5] === '+') mode.native = true;\n      if (checkAsteriskPresence) mode.current = true;\n      result[lastInterface].modes.push(mode);\n    } else if (parseOptions.verbosedInput && lastInterface && VERBOSE_BRIGHTNESS.test(line)) {\n      if (parseOptions.debug) {\n        console.log('VERBOSE_BRIGHTNESS', line);\n      }\n      parts = VERBOSE_BRIGHTNESS.exec(line);\n      result[lastInterface].brightness = parseFloat(parts[1]);\n    } else if (parseOptions.verbosedInput && lastInterface && mode && VERBOSE_HOR_MODE_REGEX.test(line)) {\n      if (parseOptions.debug) {\n        console.log('VERBOSE_HOR_MODE_REGEX', line);\n      }\n      parts = VERBOSE_HOR_MODE_REGEX.exec(line);\n      mode.width = parseInt(parts[1], 10);\n    } else if (parseOptions.verbosedInput && lastInterface && mode && VERBOSE_VERT_MODE_REGEX.test(line)) {\n      if (parseOptions.debug) {\n        console.log('VERBOSE_VERT_MODE_REGEX', line);\n      }\n      parts = VERBOSE_VERT_MODE_REGEX.exec(line);\n      mode.height = parseInt(parts[1], 10);\n      mode.rate = parseFloat(parts[2]);\n      result[lastInterface].modes.push(mode);\n      mode = null;\n    } else if (parseOptions.verbosedInput\n      && lastInterface\n      && (VERBOSE_MODE_REGEX.test(line) || VERBOSE_MODE_REGEX_CUSTOM.test(line))\n      && (!VERBOSE_EDID_START_LINE.test(line))) {\n      if (parseOptions.debug) {\n        console.log('VERBOSE_MODE_REGEX || VERBOSE_MODE_REGEX_CUSTOM', line);\n      }\n      parts = VERBOSE_MODE_REGEX.exec(line);\n      if (!parts) {\n        parts = VERBOSE_MODE_REGEX_CUSTOM.exec(line);\n      }\n\n      mode = {};\n      /*  width: parseInt(parts[1], 10),\n        height: parseInt(parts[2], 10)\n      }; */\n      if (/^[0-9]+i$/.test(parts[2])) mode.interlaced = true;\n      if (line.includes('+preferred')) mode.native = true;\n      if (line.includes('*current')) mode.current = true;\n    } else if (parseOptions.verbosedInput && lastInterface && VERBOSE_EDID_START_LINE.test(line)) {\n      if (parseOptions.debug) {\n        console.log('VERBOSE_EDID_START_LINE', line);\n      }\n      startParseEdid = true;\n      result[lastInterface].edid = '';\n    } else if (startParseEdid && parseOptions.verbosedInput && lastInterface && VERBOSE_EDID_NEXT_LINE.test(line)) {\n      if (parseOptions.debug) {\n        console.log('VERBOSE_EDID_NEXT_LINE', line);\n      }\n      parts = VERBOSE_EDID_NEXT_LINE.exec(line);\n      result[lastInterface].edid += parts[1];\n    } else if (parseOptions.verbosedInput && lastInterface && VERBOSE_ANY_LINE_REGEX.test(line)) {\n      if (parseOptions.debug) {\n        console.log('VERBOSE_ANY_LINE_REGEX', line);\n      }\n      if (startParseEdid) {\n        startParseEdid = false;\n      }\n    } else {\n      lastInterface = null;\n    }\n  });\n  return result;\n}\n\nexport {\n  xrandrParser as parser,\n  xrandrParser as default\n};\n"],"file":"xrandr.js"}